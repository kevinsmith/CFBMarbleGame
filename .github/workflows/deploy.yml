name: Deployment

on:
  push:
    branches: [ 'prod' ]
  pull_request:

env:
  REGISTRY: ghcr.io
  APP_IMAGE: ${{ github.repository_owner }}/cfbmarblegame/app

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  playwright:
    timeout-minutes: 60
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: cd playwright && npm ci

      - name: Restore Playwright binaries cache
        uses: actions/cache@v4
        id: playwright-cache
        with:
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/playwright/package-lock.json') }}
          path: ~/.cache/ms-playwright

      - name: Install Playwright Browsers
        run: cd playwright && npx playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - uses: docker/setup-buildx-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/app/Dockerfile
          target: prod
          load: true
          cache-from: |
            type=gha,scope=${{ github.ref_name }}-playwright
            type=gha
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-playwright

      - name: Run app
        run: docker compose -f docker-compose.yml -f docker-compose.github.yml up -d

      - name: Run Playwright tests
        env:
          PW_BASE_URL: http://localhost:9000
        run: cd playwright && npx playwright test

      - name: Check Docker containers
        if: ${{ !cancelled() }}
        run: docker compose -f docker-compose.yml -f docker-compose.github.yml ps

      - name: Docker logs
        if: ${{ !cancelled() }}
        run: docker compose -f docker-compose.yml -f docker-compose.github.yml logs

      - uses: daun/playwright-report-summary@e542390160d927152b739167a40b4be6a0bdfda2 # v3.7.0
        if: ${{ !cancelled() }}
        with:
          report-file: playwright/results.json
          job-summary: true
          report-tag: ${{ github.run_id }}
          custom-info: '[Workflow run summary](https://github.com/kevinsmith/CFBMarbleGame/actions/runs/${{ github.run_id }})'

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright/playwright-report/
          retention-days: 30

  hadolint:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Lint Dockerfile
        run: make hadolint

  phpcs:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build PHP_CodeSniffer image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/app/Dockerfile
          target: php_codesniffer
          load: true
          cache-from: |
            type=gha,scope=${{ github.ref_name }}-phpcs
            type=gha
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-phpcs

      - name: Run PHP_CodeSniffer with Doctrine Coding Standard
        run: |
          touch playwright/.env # To avoid missing file error
          make phpcs

  phpstan:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/install-composer-deps
        with:
          php-version: 8.4
          github-token: ${{ secrets.GITHUB_TOKEN }}
          working-directory: ./app

      - name: Run PHPStan
        run: |
          touch playwright/.env # To avoid missing file error
          make phpstan

  phpunit:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/install-composer-deps
        with:
          php-version: 8.4
          github-token: ${{ secrets.GITHUB_TOKEN }}
          working-directory: ./app

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build PHPUnit image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/app/Dockerfile
          target: phpunit
          load: true
          cache-from: |
            type=gha,scope=${{ github.ref_name }}-phpunit
            type=gha
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-phpunit

      - name: Run PHPUnit
        run: |
          touch playwright/.env # To avoid missing file error
          make phpunit

  build:
    runs-on: ubuntu-24.04
    needs: [playwright, hadolint, phpcs, phpstan, phpunit]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.APP_IMAGE }}
          tags: |
            type=sha,prefix=
            type=ref,event=branch,enable=${{ github.ref != 'refs/heads/prod' }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/prod' }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/app/Dockerfile
          target: prod
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy:
    runs-on: ubuntu-24.04
    needs: build
    if: github.ref == 'refs/heads/prod'
    environment:
      name: production
      url: https://cfbmarblegame.com
    concurrency:
      group: production
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: benjlevesque/short-sha@v3.0
        with:
          variable_name: GIT_SHORT_SHA

      - name: Deploy to production
        env:
          DOCKER_HOST: ssh://deploy@167.99.8.133
          HEALTH_CHECK_URL: ${{ vars.HEALTH_CHECK_URL }}
          MAX_RETRIES: 30
          RETRY_INTERVAL: 10
        run: |
          function check_health {
            curl --silent --fail --max-time 5 "$HEALTH_CHECK_URL" > /dev/null
            return $?
          }

          echo "Deploying stack..."
          docker network create --driver overlay --scope swarm traefik || true
          docker stack deploy \
            --compose-file docker-compose.yml \
            --compose-file docker-compose.prod.yml \
            --prune \
            --with-registry-auth \
            cfbmarblegame

          echo "Waiting for health check..."
          retries=0
          until check_health || [ $retries -eq $MAX_RETRIES ]; do
            echo "Health check failed. Retrying in ${RETRY_INTERVAL}s..."
            sleep $RETRY_INTERVAL
            retries=$((retries + 1))
          done

          if [ $retries -eq $MAX_RETRIES ]; then
            echo "Health check failed after $MAX_RETRIES attempts"
            exit 1
          fi

          echo "Deployment successful!"
